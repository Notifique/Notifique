buildscript {
  ext.kotlinVersion = '1.1.3-2'
  dependencies {
    classpath 'com.android.tools.build:gradle:3.0.0-alpha6'
    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  }

  repositories {
    mavenCentral()
    maven { url 'https://maven.google.com/' }
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

ext {
  buildToolsVersion = '26.0.0'
  compileSdkVersion = 25
  supportLibraryVersion = '25.0.0'
}

allprojects {
  apply plugin: 'net.ltgt.errorprone'
  apply plugin: 'checkstyle'

  tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Werror']
  }

  task checkstyle(type: Checkstyle) {
    configFile rootProject.file('checkstyle.xml')
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
  }

  checkstyle {
    toolVersion = '7.7'
  }

  configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'com.android.support' &&
          details.requested.name !=
          'multidex' &&
          details.requested.name !=
          'multidex-instrumentation') {
        // Force all support libraries to use the same version, even if they are transitive.
        details.useVersion supportLibraryVersion
      }
    }
  }

  afterEvaluate { project ->
    project.configurations.all {
      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.version.contains('+')) {
          throw new GradleException(
              "Wildcard dependency forbidden: ${requested.group}:${requested.name}:${requested.version}")
        }
      }
    }
  }
}

subprojects {
  afterEvaluate {
    tasks.findByName('check').dependsOn('checkstyle')
  }
}
