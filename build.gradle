buildscript {
  ext.versions = ['androidGradlePlugin'   : '3.0.1',
                  'buildTools'            : '27.0.1',
                  'compileSdk'            :  26,
                  'coroutines'            : '0.19.3',
                  'dagger'                : '2.13',
                  'errorProne'            : '2.1.2',
                  'errorProneGradlePlugin': '0.0.13',
                  'junit'                 : '4.12',
                  'kotlin'                : '1.1.61',
                  'room'                  : '1.0.0',
                  'supportLibrary'        : '27.0.1',
                  'truth'                 : '0.36']

  ext.deps = ['androidGradlePlugin'   : "com.android.tools.build:gradle:$versions.androidGradlePlugin",
              'dagger'                : ['compiler'          : "com.google.dagger:dagger-compiler:$versions.dagger",
                                         'runtime'           : "com.google.dagger:dagger:$versions.dagger"],
              'daggerAndroid'         : ['compiler'          : "com.google.dagger:dagger-android-processor:$versions.dagger",
                                         'runtime'           : "com.google.dagger:dagger-android:$versions.dagger"],
              'errorProneGradlePlugin': "net.ltgt.gradle:gradle-errorprone-plugin:$versions.errorProneGradlePlugin",
              'junit'                 : "junit:junit:$versions.junit",
              'kotlin'                : ['coroutines'        : "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines",
                                         'coroutinesAndroid' : "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines",
                                         'gradlePlugin'      : "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin",
                                         'stdlibJre7'        : "org.jetbrains.kotlin:kotlin-stdlib-jre7:$versions.kotlin"],
              'room'                  : ['compiler'          : "android.arch.persistence.room:compiler:$versions.room",
                                         'runtime'           : "android.arch.persistence.room:runtime:$versions.room"],
              'supportLibrary'        : ['annotations'       : "com.android.support:support-annotations:$versions.supportLibrary",
                                         'appCompat'         : "com.android.support:appcompat-v7:$versions.supportLibrary",
                                         'recyclerView'      : "com.android.support:recyclerview-v7:${versions.supportLibrary}"],
              'truth'                 : "com.google.truth:truth:$versions.truth"]

  dependencies {
    classpath deps.androidGradlePlugin
    classpath deps.errorProneGradlePlugin
    classpath deps.kotlin.gradlePlugin
  }

  repositories {
    mavenCentral()
    google()
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

allprojects {
  apply plugin: 'net.ltgt.errorprone'
  apply plugin: 'checkstyle'

  tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '-Xep:UnnecessaryDefaultInEnumSwitch:ERROR',
        '-Xep:TypeParameterUnusedInFormals:ERROR',
        '-Xep:OperatorPrecedence:ERROR',
        '-Xep:ReferenceEquality:ERROR',
        '-Xep:FloatingPointLiteralPrecision:ERROR',
        '-Xep:SimpleDateFormatConstant:ERROR'
    ]
  }

  task checkstyle(type: Checkstyle) {
    configFile rootProject.file('checkstyle.xml')
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
  }

  checkstyle {
    toolVersion = '7.7'
  }

  repositories {
    mavenCentral()
  }

  configurations.all {
    resolutionStrategy {
      eachDependency { details ->
        // Force all of the primary support libraries to use the same version.
        if (details.requested.group == 'com.android.support') {
          details.useVersion versions.supportLibrary
        }
        // Force all the error-prone dependencies to use the same version.
        if (details.requested.group == 'com.google.errorprone' &&
            details.requested.name.startsWith('error_prone_')) {
          details.useVersion versions.errorProne
        }
      }
    }
  }

  afterEvaluate { project ->
    project.configurations.all {
      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.version.contains('+')) {
          throw new GradleException(
              "Wildcard dependency forbidden: ${requested.group}:${requested.name}:${requested.version}")
        }
      }
    }
  }
}

subprojects {
  afterEvaluate {
    tasks.findByName('check').dependsOn('checkstyle')
  }
}
